from ortools.constraint_solver import pywrapcp, routing_enums_pb2

# üìç Cities:
# 0 = Mumbai (Depot)
# 1 = Pune
# 2 = Bangalore
# 3 = Indore

# üöó Symmetric Distance Matrix
distance_matrix = [[0, 177, 177, 199, 260, 441, 281, 299, 291, 263, 308, 425, 567, 339, 428, 302, 1497, 1504, 1301, 1301, 1317, 1071, 1156, 1012, 1355, 1161, 1019, 1201, 1108, 1150, 1105, 1110, 1110, 1099, 1110, 1061], [177, 0, 0, 124, 185, 486, 245, 260, 225, 183, 290, 265, 392, 199, 256, 130, 1587, 1594, 1387, 1387, 1408, 1159, 1248, 1101, 1437, 1248, 1113, 1297, 1208, 1258, 1208, 1212, 1210, 1200, 1210, 1170], [177, 0, 0, 124, 185, 486, 245, 260, 225, 183, 290, 265, 392, 199, 256, 130, 1587, 1595, 1387, 1387, 1408, 1159, 1248, 1101, 1437, 1248, 1113, 1297, 1208, 1258, 1208, 1212, 1210, 1200, 1210, 1170], [199, 124, 124, 0, 67, 367, 121, 135, 106, 67, 166, 242, 405, 147, 267, 159, 1473, 1482, 1273, 1273, 1296, 1047, 1137, 989, 1322, 1134, 1003, 1187, 1101, 1153, 1101, 1105, 1102, 1092, 1102, 1067], [260, 185, 185, 67, 0, 330, 70, 79, 40, 7, 118, 220, 392, 122, 260, 179, 1438, 1446, 1237, 1237, 1261, 1014, 1104, 956, 1284, 1099, 973, 1156, 1072, 1127, 1072, 1076, 1073, 1063, 1073, 1042], [441, 486, 486, 367, 330, 0, 260, 254, 301, 336, 213, 518, 689, 435, 575, 510, 1107, 1116, 906, 907, 931, 683, 773, 625, 954, 769, 642, 825, 742, 801, 744, 748, 744, 734, 744, 717], [281, 245, 245, 121, 70, 260, 0, 17, 45, 76, 47, 274, 448, 181, 323, 249, 1367, 1376, 1166, 1167, 1191, 943, 1034, 886, 1213, 1029, 903, 1086, 1002, 1059, 1003, 1007, 1004, 994, 1003, 974], [299, 260, 260, 135, 79, 254, 17, 0, 47, 85, 41, 273, 447, 182, 324, 256, 1360, 1369, 1159, 1159, 1184, 937, 1028, 879, 1205, 1022, 897, 1080, 997, 1054, 998, 1002, 999, 989, 998, 970], [291, 225, 225, 106, 40, 301, 45, 47, 0, 42, 88, 229, 403, 136, 278, 210, 1407, 1416, 1206, 1206, 1231, 984, 1075, 927, 1252, 1069, 944, 1127, 1044, 1102, 1046, 1049, 1046, 1036, 1046, 1017], [263, 183, 183, 67, 7, 336, 76, 85, 42, 0, 124, 213, 385, 115, 253, 173, 1444, 1452, 1243, 1243, 1267, 1020, 1110, 962, 1290, 1105, 979, 1162, 1078, 1134, 1079, 1083, 1080, 1070, 1079, 1049], [308, 290, 290, 166, 118, 213, 47, 41, 88, 124, 0, 313, 487, 223, 365, 296, 1320, 1328, 1119, 1119, 1144, 896, 987, 839, 1166, 982, 856, 1039, 956, 1013, 957, 961, 958, 947, 957, 928], [425, 265, 265, 242, 220, 518, 274, 273, 229, 213, 313, 0, 174, 98, 70, 140, 1606, 1616, 1405, 1407, 1435, 1191, 1282, 1134, 1448, 1272, 1155, 1336, 1257, 1318, 1259, 1263, 1259, 1249, 1258, 1235], [567, 392, 392, 405, 392, 689, 448, 447, 403, 385, 487, 174, 0, 270, 139, 264, 1765, 1775, 1565, 1566, 1596, 1354, 1445, 1299, 1605, 1434, 1321, 1500, 1424, 1486, 1427, 1430, 1426, 1416, 1425, 1405], [339, 199, 199, 147, 122, 435, 181, 182, 136, 115, 223, 98, 270, 0, 142, 107, 1535, 1544, 1333, 1334, 1361, 1115, 1205, 1058, 1378, 1198, 1076, 1258, 1177, 1236, 1179, 1182, 1179, 1169, 1178, 1152], [428, 256, 256, 267, 260, 575, 323, 324, 278, 253, 365, 70, 139, 142, 0, 126, 1671, 1680, 1469, 1471, 1498, 1253, 1344, 1196, 1513, 1335, 1216, 1397, 1317, 1376, 1319, 1323, 1319, 1309, 1318, 1293], [302, 130, 130, 159, 179, 510, 249, 256, 210, 173, 296, 140, 264, 107, 126, 0, 1617, 1625, 1416, 1416, 1441, 1193, 1283, 1135, 1462, 1278, 1152, 1335, 1250, 1305, 1251, 1255, 1252, 1242, 1252, 1220], [1497, 1587, 1587, 1473, 1438, 1107, 1367, 1360, 1407, 1444, 1320, 1606, 1765, 1535, 1671, 1617, 0, 12, 201, 200, 179, 427, 341, 486, 162, 338, 477, 299, 395, 378, 401, 396, 394, 404, 393, 461], [1504, 1594, 1595, 1482, 1446, 1116, 1376, 1369, 1416, 1452, 1328, 1616, 1775, 1544, 1680, 1625, 12, 0, 210, 209, 186, 435, 348, 493, 173, 347, 484, 304, 400, 381, 406, 401, 399, 409, 398, 464], [1301, 1387, 1387, 1273, 1237, 906, 1166, 1159, 1206, 1243, 1119, 1405, 1565, 1333, 1469, 1416, 201, 210, 0, 5, 49, 230, 152, 288, 60, 140, 285, 129, 221, 236, 231, 226, 221, 229, 219, 300], [1301, 1387, 1387, 1273, 1237, 907, 1167, 1159, 1206, 1243, 1119, 1407, 1566, 1334, 1471, 1416, 200, 209, 5, 0, 44, 230, 150, 288, 63, 139, 284, 126, 219, 232, 229, 223, 218, 227, 216, 297], [1317, 1408, 1408, 1296, 1261, 931, 1191, 1184, 1231, 1267, 1144, 1435, 1596, 1361, 1498, 1441, 179, 186, 49, 44, 0, 248, 161, 307, 84, 162, 297, 122, 219, 217, 227, 221, 218, 228, 217, 291], [1071, 1159, 1159, 1047, 1014, 683, 943, 937, 984, 1020, 896, 1191, 1354, 1115, 1253, 1193, 427, 435, 230, 230, 248, 0, 91, 58, 286, 90, 61, 146, 97, 175, 109, 108, 99, 95, 97, 154], [1156, 1248, 1248, 1137, 1104, 773, 1034, 1028, 1075, 1110, 987, 1282, 1445, 1205, 1344, 1283, 341, 348, 152, 150, 161, 91, 0, 148, 211, 43, 136, 57, 77, 129, 91, 86, 78, 83, 75, 160], [1012, 1101, 1101, 989, 956, 625, 886, 879, 927, 962, 839, 1134, 1299, 1058, 1196, 1135, 486, 493, 288, 288, 307, 58, 148, 0, 343, 148, 39, 201, 133, 209, 141, 143, 135, 127, 134, 163], [1355, 1437, 1437, 1322, 1284, 954, 1213, 1205, 1252, 1290, 1166, 1448, 1605, 1378, 1513, 1462, 162, 173, 60, 63, 84, 286, 211, 343, 0, 195, 343, 190, 282, 295, 292, 286, 282, 290, 280, 360], [1161, 1248, 1248, 1134, 1099, 769, 1029, 1022, 1069, 1105, 982, 1272, 1434, 1198, 1335, 1278, 338, 347, 140, 139, 162, 90, 43, 148, 195, 0, 148, 88, 116, 173, 130, 126, 117, 121, 114, 197], [1019, 1113, 1113, 1003, 973, 642, 903, 897, 944, 979, 856, 1155, 1321, 1076, 1216, 1152, 477, 484, 285, 284, 297, 61, 136, 39, 343, 148, 0, 183, 103, 175, 109, 111, 105, 96, 104, 124], [1201, 1297, 1297, 1187, 1156, 825, 1086, 1080, 1127, 1162, 1039, 1336, 1500, 1258, 1397, 1335, 299, 304, 129, 126, 122, 146, 57, 201, 190, 88, 183, 0, 97, 109, 104, 99, 96, 105, 95, 171], [1108, 1208, 1208, 1101, 1072, 742, 1002, 997, 1044, 1078, 956, 1257, 1424, 1177, 1317, 1250, 395, 400, 221, 219, 219, 97, 77, 133, 282, 116, 103, 97, 0, 77, 14, 11, 2, 8, 2, 82], [1150, 1258, 1258, 1153, 1127, 801, 1059, 1054, 1102, 1134, 1013, 1318, 1486, 1236, 1376, 1305, 378, 381, 236, 232, 217, 175, 129, 209, 295, 173, 175, 109, 77, 0, 67, 67, 75, 82, 78, 89], [1105, 1208, 1208, 1101, 1072, 744, 1003, 998, 1046, 1079, 957, 1259, 1427, 1179, 1319, 1251, 401, 406, 231, 229, 227, 109, 91, 141, 292, 130, 109, 104, 14, 67, 0, 5, 13, 14, 16, 69], [1110, 1212, 1212, 1105, 1076, 748, 1007, 1002, 1049, 1083, 961, 1263, 1430, 1182, 1323, 1255, 396, 401, 226, 223, 221, 108, 86, 143, 286, 126, 111, 99, 11, 67, 5, 0, 9, 15, 12, 75], [1110, 1210, 1210, 1102, 1073, 744, 1004, 999, 1046, 1080, 958, 1259, 1426, 1179, 1319, 1252, 394, 399, 221, 218, 218, 99, 78, 135, 282, 117, 105, 96, 2, 75, 13, 9, 0, 10, 3, 81], [1099, 1200, 1200, 1092, 1063, 734, 994, 989, 1036, 1070, 947, 1249, 1416, 1169, 1309, 1242, 404, 409, 229, 227, 228, 95, 83, 127, 290, 121, 96, 105, 8, 82, 14, 15, 10, 0, 10, 76], [1110, 1210, 1210, 1102, 1073, 744, 1003, 998, 1046, 1079, 957, 1258, 1425, 1178, 1318, 1252, 393, 398, 219, 216, 217, 97, 75, 134, 280, 114, 104, 95, 2, 78, 16, 12, 3, 10, 0, 84], [1061, 1170, 1170, 1067, 1042, 717, 974, 970, 1017, 1049, 928, 1235, 1405, 1152, 1293, 1220, 461, 464, 300, 297, 291, 154, 160, 163, 360, 197, 124, 171, 82, 89, 69, 75, 81, 76, 84, 0]]

# üì¶ Demands (only customers need delivery, depot = 0)
# demands = [0, 3, 6, 4]  # Pune:3, Bangalore:6, Indore:4
demands = [
    243, 300, 245, 104, 232, 58, 265, 185, 76, 343, 120, 234, 135, 109, 168,
    45, 0, 78, 149, 204, 130, 81, 115, 108, 71, 118, 120, 72, 126, 115, 135,
    84, 83, 74, 50, 55, 137
]

# üöö Vehicle capacities
# vehicle_capacities = [10, 10]  # Two trucks, each can carry 10 orders
vehicle_capacities = [500]*25 + [500]*25  # Two trucks, each can carry 10 orders

# üè† Depot index
depot = 0

# üìå Routing Index Manager
manager = pywrapcp.RoutingIndexManager(
    len(distance_matrix), len(vehicle_capacities), depot
)

# üìå Routing Model
routing = pywrapcp.RoutingModel(manager)

# üîÅ Distance callback
def distance_callback(from_index, to_index):
    from_node = manager.IndexToNode(from_index)
    to_node = manager.IndexToNode(to_index)
    return distance_matrix[from_node][to_node]

transit_callback_index = routing.RegisterTransitCallback(distance_callback)
routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

# üì¶ Demand callback
def demand_callback(from_index):
    from_node = manager.IndexToNode(from_index)
    return demands[from_node]

demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)

# ‚ûï Add capacity constraint
routing.AddDimensionWithVehicleCapacity(
    demand_callback_index,
    0,  # no slack
    vehicle_capacities,
    True,  # start cumul to zero
    "Capacity"
)

# üîç Search strategy
search_parameters = pywrapcp.DefaultRoutingSearchParameters()
search_parameters.first_solution_strategy = (
    routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC
)

# ‚úÖ Solve
solution = routing.SolveWithParameters(search_parameters)

# üìÑ Print solution
def print_solution(manager, routing, solution):
    total_distance = 0
    total_load = 0
    for vehicle_id in range(len(vehicle_capacities)):
        index = routing.Start(vehicle_id)
        route_distance = 0
        route_load = 0
        route_nodes = []

        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            route_nodes.append(node_index)
            route_load += demands[node_index]
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            route_distance += routing.GetArcCostForVehicle(
                previous_index, index, vehicle_id
            )
        route_nodes.append(manager.IndexToNode(index))  # add end node

        # Skip if only depot is visited (unused vehicle)
        if len(route_nodes) <= 2:
            continue

        # Print used vehicle route
        print(f"\nüöö Route for vehicle {vehicle_id}:")
        for i, node in enumerate(route_nodes[:-1]):
            print(f"{node} (Load: {demands[node]}) ‚Üí ", end="")
        print(f"{route_nodes[-1]} (End)")
        print(f"üõ£Ô∏è Distance: {route_distance}, üì¶ Total Load: {route_load}")

        total_distance += route_distance
        total_load += route_load

    print(f"\n‚úÖ Total distance: {total_distance}, Total load delivered: {total_load}")

if solution:
    print_solution(manager, routing, solution)
else:
    print("‚ùå No solution found.")
